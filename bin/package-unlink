#!/usr/bin/env bash

# Please Use Google Shell Style: https://google.github.io/styleguide/shell.xml

# ---- Start unofficial bash strict mode boilerplate
# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -o errexit  # always exit on error
set -o errtrace # trap errors in functions as well
set -o pipefail # don't ignore exit codes when piping output
set -o posix    # more strict failures in subshells
# set -x          # enable debugging

IFS="$(printf "\n\t")"
# ---- End unofficial bash strict mode boilerplate

package_name=$1
package_path_in_container="./node_modules/${package_name}"
container_copied_packages_path="/home/node/copied-packages"
container_destination_path="${container_copied_packages_path}/${package_name}"

# We start by attempting to confirm that a package with the given name is actually
# symlinked in ./node_modules in the container. If not, we don't want to run the
# `npm unlink` command with an erroneous package name because that has odd behavior
# where it actually removed all symlinks or might even uninstall a necessary package.
# I think this is because `npm unlink` is actually just an alias for `npm uninstall`.
check_command="if [ -L "${package_path_in_container}" -a -d "${package_path_in_container}" ]; then echo -n '1'; fi"
symlink_found="$(docker-compose exec api sh -c "${check_command}")"

if [[ "${symlink_found}" == "1" ]]; then
  # Then npm link into this project
  echo "Unlinking package from API..."
  docker-compose exec api sh -c "cd /usr/local/src/app && npm unlink ${container_destination_path}"

  # Fool nodemon into thinking something has changed so that it restarts.
  # Touch first file found in /src with .js extension
  echo "Restarting API..."
  docker-compose exec api sh -c "touch -c $(ls ./src/*.js | head -n1)"
else
  echo "${package_name} does not appear to be linked"
fi


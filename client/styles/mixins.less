@import "{reactioncommerce:reaction-ui}/client/styles/variables.less";

/* GLOBAL STYLES
-------------------------------------------------- */
html, body {
  letter-spacing: @letter-spacing;
}

main {
  min-height: 80vh;
  // padding: 20px 60px 135px 60px;
  // padding: 20px 0 135px
  background-color: @body-bg;
}

.container-main {
  padding: 20px 60px 135px 60px;
}

/* Fix for hidden modals */
.modal-dialog {
  z-index: 9999;
}

/* RESPONSIVE CSS
-------------------------------------------------- */
@media only screen and (max-width: @screen-sm-max) {
  main {padding: 10px 5px 135px 5px;}
  body {
    font-size: @font-size-small;
  }
  h1 {
    font-size: floor((@font-size-base * 2.15));
  }
  h2 {
    font-size: floor((@font-size-base * 1.7));
  }
}


/* Special fix for bootstrap modal see: https://github.com/twbs/bootstrap/issues/9855 */
body.modal-open {
  margin-right: 0px !important;
}

/* Loading indicator, spreads over whole screen estate to intercept mouse events until view is rendered. */
.spinner-container {
  left: 0;
  position: absolute;
  top: 0;
}

.editable-error-block {
    max-width: 100% !important;
    font-size: @font-size-base;
    float: left;

}
/* Inline error block */
.error-block {
  margin: 5px 0;
  padding-left: 30px;
  color: #b94a48;
}

h1 {
  font-family : @headings-font-family-h1;
  color: @headings-color-h1;
  font-weight: @headings-font-weight-h1;
}

h2 {
  font-family : @headings-font-family-h2;
  color: @headings-color-h2;
  font-weight: @headings-font-weight-h2;
}

h3 {
  font-family : @headings-font-family-h3;
  color: @headings-color-h3;
  font-weight: @headings-font-weight-h3;
}



/* Badge Colors
// Contextual variations of badges
// Bootstrap 3.0 removed contexts for badges, we re-introduce them, based on what is done for labels
*/
// .badge-default {
//   .label-variant(@label-default-bg);
// }
//
// .badge-primary {
//   .label-variant(@label-primary-bg);
// }
//
// .badge-success {
//   .label-variant(@label-success-bg);
// }
//
// .badge-info {
//   .label-variant(@label-info-bg);
// }
//
// .badge-warning {
//   .label-variant(@label-warning-bg);
// }
//
// .badge-danger {
//   .label-variant(@label-danger-bg);
// }
//
// .badge-low-inv-warning {
//   .label-variant(@label-warning-bg);
// }

/* ribbon for dashboard */
.ribbon(@size,@color,@textcolor) {
  position: relative;
  &:before, &:after {
    content: "";
    display: block;
    position: absolute;
    top: 0;
    right: 0;
  }
  &:before {
    width: @size;
    height: @size;
    z-index: 1;
    /* FF3.6+ */
    background:
    -moz-linear-gradient(
    45deg,
    rgba(red(@color),green(@color),blue(@color),0) 0%,
    rgba(red(@color),green(@color),blue(@color),0) 49.9%,
    rgba(red(@color),green(@color),blue(@color),1) 50%,
    rgba(red(@color),green(@color),blue(@color),1) 74.9%,
    rgba(red(@color),green(@color),blue(@color),0) 75%,
    rgba(red(@color),green(@color),blue(@color),0) 100%);
    /* Chrome10+,Safari5.1+ */
    background:
    -webkit-linear-gradient(
    45deg,
    rgba(red(@color),green(@color),blue(@color),0) 0%,
    rgba(red(@color),green(@color),blue(@color),0) 49.9%,
    rgba(red(@color),green(@color),blue(@color),1) 50%,
    rgba(red(@color),green(@color),blue(@color),1) 74.9%,
    rgba(red(@color),green(@color),blue(@color),0) 75%,
    rgba(red(@color),green(@color),blue(@color),0) 100%);
    /* Opera 11.10+ */
    background:
    -o-linear-gradient(
    45deg,
    rgba(red(@color),green(@color),blue(@color),0) 0%,
    rgba(red(@color),green(@color),blue(@color),0) 49.9%,
    rgba(red(@color),green(@color),blue(@color),1) 50%,
    rgba(red(@color),green(@color),blue(@color),1) 74.9%,
    rgba(red(@color),green(@color),blue(@color),0) 75%,
    rgba(red(@color),green(@color),blue(@color),0) 100%);
    /* IE10+ */
    background:
    -ms-linear-gradient(
    45deg,
    rgba(red(@color),green(@color),blue(@color),0) 0%,
    rgba(red(@color),green(@color),blue(@color),0) 49.9%,
    rgba(red(@color),green(@color),blue(@color),1) 50%,
    rgba(red(@color),green(@color),blue(@color),1) 74.9%,
    rgba(red(@color),green(@color),blue(@color),0) 75%,
    rgba(red(@color),green(@color),blue(@color),0) 100%);
    /* W3C */
    background:
    linear-gradient(
    45deg,
    rgba(red(@color),green(@color),blue(@color),0) 0%,
    rgba(red(@color),green(@color),blue(@color),0) 49.9%,
    rgba(red(@color),green(@color),blue(@color),1) 50%,
    rgba(red(@color),green(@color),blue(@color),1) 74.9%,
    rgba(red(@color),green(@color),blue(@color),0) 75%,
    rgba(red(@color),green(@color),blue(@color),0) 100%);
  }
  &:after {
    content: attr(data-ribbon);
    width: @size;
    height: @size;
    z-index: 2;
    -webkit-transform: rotate(45deg);
    -ms-transform: rotate(45deg);
    transform: rotate(45deg);
    top: (@size / 4);
    right: (@size / 4);
    color: @textcolor;
    text-align: center;
    font-size: (@size / 6.0);
    letter-spacing: (@size / 28);
    line-height: 0;
    text-shadow: 1px 1px 1px darken(@color,30%);
  }

}

/* RTL mixins
-------------------------------------------------- */

.rtl(@rules) {
  html.rtl & {
    @rules();
  }
}
.ltr(@rules) {
  html:not(.rtl) & {
    @rules();
  }
}

.left(@n) {
  .ltr({ left: @n; });
  .rtl({ right: @n; });
}
.right(@n) {
  .ltr({ right: @n; });
  .rtl({ left: @n; });
}
.margin-left(@n) {
  .ltr({ margin-left: @n; });
  .rtl({ margin-right: @n; });
}
.margin-right(@n) {
  .ltr({ margin-right: @n; });
  .rtl({ margin-left: @n; });
}
.padding-left(@n) {
  .ltr({ padding-left: @n; });
  .rtl({ padding-right: @n; });
}
.padding-right(@n) {
  .ltr({ padding-right: @n; });
  .rtl({ padding-left: @n; });
}

.float(@n) when (@n = left) {
  .ltr({ float: left; });
  .rtl({ float: right; });
}
.float(@n) when (@n = right) {
  .ltr({ float: right; });
  .rtl({ float: left; });
}
.float(@n) when not (@n = left) and not (@n = right) {
  float: @n;
}

.clear(@n) when (@n = left) {
  .ltr({ clear: left; });
  .rtl({ clear: right; });
}
.clear(@n) when (@n = right) {
  .ltr({ clear: right; });
  .rtl({ clear: left; });
}
.clear(@n) when not (@n = left) and not (@n = right) {
  clear: @n;
}

.text-align(@n) when (@n = left) {
  .ltr({ text-align: left; });
  .rtl({ text-align: right; });
}
.text-align(@n) when (@n = right) {
  .ltr({ text-align: right; });
  .rtl({ text-align: left; });
}
.text-align(@n) when not (@n = left) and not (@n = right) {
  text-align: @n;
}

/* end of RTL mixins */

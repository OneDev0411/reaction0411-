"Storefront route URLs to provide for the updateShop mutation"
input StorefrontUrlsInput {
  "Storefront Account Profile URL (can include `:accountId` in string)"
  storefrontAccountProfileUrl: String

  "Storefront Home URL"
  storefrontHomeUrl: String

  "Storefront login URL"
  storefrontLoginUrl: String

  "Storefront single order URL (can include `:orderReferenceId` and `:orderToken` in string)"
  storefrontOrderUrl: String

  "Storefront orders URL (can include `:accountId` in string)"
  storefrontOrdersUrl: String
}

"Shop Logo URLs to provide for the updateShop mutation"
input ShopLogoUrlsInput {
  "The primary logo URL for this shop. Setting this overrides any uploaded logo."
  primaryShopLogoUrl: String
}

"Input parameters for the updateShop mutation"
input UpdateShopInput {
  "An address book entry to set the primary shop's address"
  addressBook: [AddressInput]

  "Whether to allow user to checkout without creating an account"
  allowGuestCheckout: Boolean

  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String

  "The shop's description"
  description: String

  "The shops primary email address"
  emails: [EmailRecordInput]

  "The shop's keywords"
  keywords: String

  "The shop's name"
  name: String

  "The ID of the shop for the logos to update"
  shopId: ID!

  "Object of shop logo urls "
  shopLogoUrls: ShopLogoUrlsInput

  "Shop's slug"
  slug: String

  "Object of storefront routes urls"
  storefrontUrls: StorefrontUrlsInput
}

"The response from the `updateShop` mutation"
type UpdateShopPayload {
  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String

  "The shop which was updated"
  shop: Shop!
}

extend type Mutation {
  "Given shop data, update the Shops collection with this data"
  updateShop(
    "Mutation input"
    input: UpdateShopInput!
  ): UpdateShopPayload!
}

# This docker-compose file is used to run the reaction app in docker for development
# The local files are mounted into the created container.
# Usage: docker-compose up [-d]

version: '3.4'

networks:
  api:
    external:
      name: api.reaction.localhost
  auth:
    external:
      name: auth.reaction.localhost

services:

  reaction:
    build:
      context: .
      target: meteor-dev
    command: bash -c "npm install && node ./.reaction/waitForReplica.js && reaction" #TODO; Revert to Meteor NPM. See comment in Dockerfile about Meteor1.7 NPM version issue.
    depends_on:
      - mongo-init-replica
    environment:
      MONGO_URL: "mongodb://mongo:27017/reaction"
      MONGO_OPLOG_URL: "mongodb://mongo:27017/local"
      ROOT_URL: "http://localhost:3000"
      HYDRA_ADMIN_URL: "http://hydra:4445"
      HYDRA_OAUTH2_INTROSPECT_URL: "http://hydra:4445/oauth2/introspect"
    networks:
      default:
      api:
      auth:
    ports:
      - "3000:3000"
    volumes:
      - .:/opt/reaction/src
      - reaction_node_modules:/opt/reaction/src/node_modules # do not link node_modules in, and persist it between dc up runs

  mongo:
    image: mongo:3.6.3
    command: mongod --oplogSize 128 --replSet rs0 --storageEngine=wiredTiger
    ports:
      - "27017:27017"
    volumes:
      - mongo-db:/data/db

  # This container's job is just to run the command to initialize the replica set. It will stop after doing that.
  mongo-init-replica:
    image: mongo:3.6.3
    command: 'mongo mongo/reaction --eval "rs.initiate({ _id: ''rs0'', members: [ { _id: 0, host: ''localhost:27017'' } ]})"'
    depends_on:
      - mongo

volumes:
  mongo-db:
  reaction_node_modules:

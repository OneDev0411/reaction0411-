import SimpleSchema from "simpl-schema";
import { Meteor } from "meteor/meteor";
import { createdAtAutoValue, updatedAtAutoValue } from "./helpers";
import { Metafield } from "./metafield";
import { ShippingParcel } from "./shipping";

/**
 * @name Catalog
 * @memberof Schemas
 * @type {SimpleSchema}
 * @property {String} _id required
 * @property {String} barcode optional
 * @property {Date} createdAt required, value autogenerated
 * @property {String} description optional
 * @property {Number} height optional, default value: `0`
 * @property {Boolean} isBackorder required
 * @property {Boolean} isDeleted required, default value: `false`
 * @property {Boolean} isLowQuantity required
 * @property {Boolean} isSoldOut required
 * @property {Boolean} isTaxable required, default value: `false`
 * @property {Boolean} isVisible required, default value: `false`
 * @property {Number} length optional, default value: `0`
 * @property {Number} lowInventoryWarningThreshold optional, default value: `0`
 * @property {ImageInfo[]} media optional
 * @property {Metafield[]} metafields optional
 * @property {String} metaDescription optional
 * @property {Number} minOrderQuantity required, default value: `1`
 * @property {String} originCountry optional
 * @property {String} pageTitle optional
 * @property {ShippingParcel} parcel optional
 * @property {Object} positions optional
 * @property {ImageInfo} primaryImage optional
 * @property {String} productId required
 * @property {String} productType optional
 * @property {Boolean} requiresShipping optional, default value: `true`, Require a shipping address
 * @property {String} shopId required
 * @property {String} sku optional
 * @property {String} slug optional
 * @property {SocialMetadata[]} socialMetadata optional
 * @property {Array} tagIds optional
 * @property {String} taxCode optional, default value: `"0000"`
 * @property {String} taxDescription optional
 * @property {String} title required
 * @property {String} type required, default value: `product-simple`
 * @property {Date} updatedAt optional
 * @property {String} vendor optional
 * @property {Number} weight optional, default value: `0`
 * @property {Number} width optional, default value: `0`
 *
 *
 * ---------- TODO
 * @property {?????} price optional
 * @property {?????} pricing optional
 * @property {?????} variants optional
 *
 *
 */
export const Catalog = new SimpleSchema({
  "_id": {
    type: String,
    label: "Product Id"
  },
  "barcode": {
    type: String,
    label: "Barcode",
    optional: true
  },
  "createdAt": {
    type: Date,
    label: "Date/time this product was created at",
    autoValue: createdAtAutoValue,
    index: 1
  },
  "description": {
    type: String,
    label: "Product description",
    optional: true
  },
  "height": {
    type: Number,
    label: "Height",
    min: 0,
    optional: true,
    defaultValue: 0
  },
  "isBackorder": {
    type: Boolean,
    label: "Indicates when the seller has allowed the sale of product which is not in stock",
  },
  "isDeleted": {
    type: Boolean,
    label: "Indicates when a product is archived",
    index: 1,
    defaultValue: false
  },
  "isLowQuantity": {
    type: Boolean,
    label: "Indicates that the product quantity is too low",
  },
  "isSoldOut": {
    type: Boolean,
    label: "Indicates when the product quantity is zero",
  },
  "isTaxable": {
    type: Boolean,
    label: "Indicates if a product is taxable",
    index: 1,
    defaultValue: false
  },
  "isVisible": {
    type: Boolean,
    label: "Indicates if a product is visible to non-admin users",
    index: 1,
    defaultValue: false
  },
  "length": {
    type: Number,
    label: "Length",
    min: 0,
    optional: true,
    defaultValue: 0
  },
  "lowInventoryWarningThreshold": {
    type: SimpleSchema.Integer,
    label: "Warn at",
    min: 0,
    optional: true,
    defaultValue: 0
  },
  "media": {
    type: Array,
    label: "Media",
    optional: true
  },
  "media.$": {
    type: ImageInfo
  },
  "metafields": {
    type: Array,
    label: "Metafields",
    optional: true
  },
  "metafields.$": {
    type: Metafield
  },
  "metaDescription": {
    type: String,
    label: "Meta description",
    optional: true
  },
  "minOrderQuantity": {
    type: Number,
    label: "Minimum quantity per item in an order",
    defaultValue: 1
  },
  "originCountry": {
    type: String,
    label: "Origin country",
    optional: true
  },
  "pageTitle": {
    type: String,
    label: "Page title",
    optional: true
  },
  "parcel": {
    type: ShippingParcel,
    label: "Shipping parcel",
    optional: true
  },
  "positions": {
    type: Object,
    label: "Product positions",
    blackbox: true,
    optional: true
  },
  //
  //
  //
  //
  //
  "price": {

  },
  "pricing": {

  },
    //
  //
  //
  //
  //
  "primaryImage": {
    type: ImageInfo,
    label: "Primary Image",
    optional: true
  },
  "productId": {
    type: String,
    label: "Product Id"
  },
  "productType": {
    type: String,
    label: "Product type",
    optional: true
  },
  "requiresShipping": {
     type: Boolean,
     label: "Require a shipping address",
     defaultValue: true
   },
  "shopId": {
    type: String,
    label: "Product ShopId",
    index: 1
  },
  "sku": {
    type: String,
    label: "SKU",
    optional: true
  },
  "slug": {
    type: String,
    optional: true,
    index: 1
  },
  "socialMetadata": {
    type: Array,
    label: "Social Metadata",
    optional: true
  },
  "socialMetadata.$": {
    type: SocialMetadata
  },
  "tagIds": {
    type: Array,
    label: "Hashtags",
    optional: true
  },
  "taxCode": {
    type: String,
    label: "Tax Code",
    defaultValue: "0000",
    optional: true
  },
  "taxDescription": {
    type: String,
    label: "Tax Description",
    optional: true
  },
  "title": {
    type: String,
    label: "Product Title",
    defaultValue: ""
  },
  "type": {
    type: String,
    label: "Product type",
    defaultValue: "product-simple"
  },
  "updatedAt": {
    type: Date,
    label: "Updated at",
    autoValue: updatedAtAutoValue
  },
  //
  //
  //
  //
  //
  "variants": {

  },
  //
  //
  //
  //
  //
  "vendor": {
    type: String,
    label: "Vendor",
    optional: true
  },
  "weight": {
    type: Number,
    label: "Weight",
    min: 0,
    optional: true,
    defaultValue: 0,
    custom() {
      if (Meteor.isClient) {
        if (!(this.siblingField("type").value === "inventory" || this.value ||
          this.value === 0)) {
          return SimpleSchema.ErrorTypes.REQUIRED;
        }
      }
    }
  },
  "width": {
    type: Number,
    label: "Width",
    min: 0,
    optional: true,
    defaultValue: 0
  },
});
/**
 * @name ImageInfo
 * @memberof Schemas
 * @type {SimpleSchema}
 * @property {Number} priority required
 * @property {String} productId required
 * @property {Number} toGrid required
 * @property {String} variantId required
 * @property {TODO} URLs required
 */
export const ImageInfo = new SimpleSchema({
  "priority": {
    type: Number,
    defaultValue: 0
  },
  "productId": {
    type: String,
    label: "Product Id"
  },
  "toGrid": {
    type: Number,
    defaultValue: 0
  },
  "variantId": {
    type: String,
    label: "Variant Id"
  },
  "URLs": {
    //TODO: what do I do here?
  }
});

/**
 * @name SocialMetadata
 * @memberof Schemas
 * @type {SimpleSchema}
 * @property {String} message required
 * @property {String} service required
 */
export const SocialMetadata = new SimpleSchema({
  "message": {
    type: String,
    label: "Message",
    optional: true
  },
  "service": {
    type: String,
    label: "Service",
    optional: true
  }
});

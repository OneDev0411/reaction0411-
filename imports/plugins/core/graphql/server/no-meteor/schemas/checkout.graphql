########################
## Fulfillment
########################

"Information needed by the fulfillment type to properly fulfill the order"
type FulfillmentData {
  # Set Address._id to optional reference passed when setting the shippingAddress
  "The mailing address to which this fulfillment group should be shipped"
  shippingAddress: Address
}

"""
Links one or more cart items to fulfillment data. The most common example is having one FulfillmentGroup
per shipping address.
"""
type FulfillmentGroup implements Node {
  "The fulfillment ID"
  _id: ID!

  "Information needed by the fulfillment type to properly fulfill the order"
  data: FulfillmentData

  # DB would store only an array of cart item ID
  "The items that are included in this fulfillment group"
  items: [CartItem]!

  "The fulfillment type. Any valid type that has been registered by a fulfillment plugin."
  type: String!
}

"Input needed when setting a shipping address"
input SetShippingAddressInput {
  "The shipping address"
  address: AddressInput!

  "If set, this will be saved as the Address._id. Otherwise an ID will be generated."
  addressId: String

  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String
}

"The response from the `setShippingAddress` mutation"
type SetShippingAddressPayload {
  "The updated Cart"
  cart: Cart!

  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String
}

########################
## Payment
########################

"An example"
type ExamplePaymentMethodInputData {
  example: String!
}

"An example"
type ExampleSavedCardPaymentMethodInputData {
  cvc: String!
}

union PaymentMethodInputData = ExamplePaymentMethodInputData | ExampleSavedCardPaymentMethodInputData

"""
Information about a payment method that has been chosen by a shopper,
and how much of the order total should be applied to it
"""
type SelectedPaymentMethodInfo {
  """
  The amount that will be applied to this payment method. If there are multiple payment methods applied to the
  order, this may be less than the order total.
  """
  amount: Money!

  """
  The shopper-provided data needed to complete the payment using this method
  """
  data: PaymentMethodInputData

  "The payment method"
  method: PaymentMethod!
}

# "An example"
input ExampleSavedCardPaymentMethodInputDataInput {
  cvc: String!
}

"Input when setting the example saved card payment method as the payment method for the cart"
input SetExampleSavedCardPaymentMethodOnCartInput {
  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String

  """
  The shopper-provided data needed to complete the payment using this method
  """
  inputData: ExampleSavedCardPaymentMethodInputDataInput!

  "The payment method data. Copy from PaymentMethod.data of the chosen method."
  methodData: String!
}

# "An example"
input ExamplePaymentMethodInputDataInput {
  example: String!
}

"Input when setting the example payment method as the payment method for the cart"
input SetExamplePaymentMethodOnCartInput {
  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String

  """
  The shopper-provided data needed to complete the payment using this method
  """
  inputData: ExamplePaymentMethodInputDataInput!

  "The payment method data. Copy from PaymentMethod.data of the chosen method."
  methodData: String!
}

"The response from one of the mutations that sets the payment method for a cart"
type SetPaymentPayload {
  "The updated Cart"
  cart: Cart!

  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String
}

########################
## General
########################

"A summary of the totals for this order"
type OrderSummary {
  "The total price of all chosen fulfillment methods"
  fulfillmentTotal: Money!

  "The combined prices of all cart items"
  itemTotal: Money!

  "The total estimated tax that has not already been included in the item prices"
  taxTotal: Money!

  "The sum of `itemTotal`, `fulfillmentTotal`, and `taxTotal`"
  total: Money!
}

"Holds all information collected for a cart during checkout"
type Checkout {
  "One or more fulfillment groups, for example, mapping certain items to certain shipping addresses"
  fulfillmentGroups: [FulfillmentGroup]!

  "One or more payment methods selected by the shopper during checkout"
  selectedPaymentMethods: [SelectedPaymentMethodInfo]!

  "A summary of the totals for this order"
  summary: OrderSummary!
}

extend type Mutation {
  "Set the shipping address for all fulfillment groups"
  setShippingAddress(input: SetShippingAddressInput!): SetShippingAddressPayload!

  "Set the example payment method as the way the user has chosen to pay for a cart"
  setExamplePaymentMethodOnCart(input: SetExamplePaymentMethodOnCartInput!): SetPaymentPayload!

  "Set the example saved card payment method as the way the user has chosen to pay for a cart"
  setExampleSavedCardPaymentMethodOnCart(input: SetExampleSavedCardPaymentMethodOnCartInput!): SetPaymentPayload!

  # Maybe add later
  # addPayment(input: AddPaymentInput!): AddPaymentPayload!
  # removePayment(input: RemovePaymentInput!): RemovePaymentPayload!
}

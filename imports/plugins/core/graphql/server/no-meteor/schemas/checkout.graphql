"Information needed by the fulfillment type to properly fulfill the order"
type FulfillmentData {
  # Set Address._id to optional reference passed when setting the shippingAddress
  "The mailing address to which this fulfillment group should be shipped"
  shippingAddress: Address
}

"""
Links one or more cart items to fulfillment data. The most common example is having one FulfillmentGroup
per shipping address.
"""
type FulfillmentGroup implements Node {
  "The fulfillment ID"
  _id: ID!

  "Information needed by the fulfillment type to properly fulfill the order"
  data: FulfillmentData

  # DB would store only an array of cart item ID
  "The items that are included in this fulfillment group"
  items: [CartItem]!

  "The fulfillment type. Any valid type that has been registered by a fulfillment plugin."
  type: String!
}

"Payment plugins should extend or override this"
type PaymentData {
  """
  Example: savedCardId. Other examples might be transaction IDs, wallet keys.
  Do not save full card details entered by a shopper here.
  """
  savedCardId: String
}

"""
Information about a payment method that has been chosen by a shopper,
and how much of the order total should be applied to it
"""
type SelectedPaymentMethodInfo {
  """
  The amount that will be applied to this payment method. If there are multiple payment methods applied to the
  order, this may be less than the order total.
  """
  amount: Money!

  """
  The data needed to complete the payment. This could be data pre-associated with the payment method, such as a
  saved card ID, or data entered by the user, or both.
  """
  data: PaymentData

  "The payment method. Any valid type that has been registered by a payment plugin. e.g., saved_card"
  method: PaymentMethod!
}

"A summary of the totals and other costs for this order"
type OrderSummary {
  "The total price of all chosen fulfillment methods"
  fulfillment: Money!

  "The combined prices of all cart items"
  subtotal: Money!

  "The estimated tax that has not already been included in the item prices"
  tax: Money!

  "The sum of `subtotal`, `fulfillment`, and `tax`"
  total: Money!
}

"Holds all information collected for a cart during checkout"
type Checkout {
  "One or more fulfillment groups, for example, mapping certain items to certain shipping addresses"
  fulfillmentGroups: [FulfillmentGroup]!

  "One or more payment methods selected by the shopper during checkout"
  selectedPaymentMethods: [SelectedPaymentMethodInfo]

  "A summary of the totals and other costs for this order"
  summary: OrderSummary
}

"Input needed when setting a shipping address"
input SetShippingAddressInput {
  "The shipping address"
  address: AddressInput!

  "If set, this will be saved as the Address._id. Otherwise an ID will be generated."
  addressId: String

  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String
}

"The response from the `setShippingAddress` mutation"
type SetShippingAddressPayload {
  "The updated Cart"
  cart: Cart!

  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String
}

"Payment plugins should extend or override this"
input PaymentDataInput {
  """
  Example: savedCardId. Other examples might be transaction IDs, wallet keys.
  Do not save full card details entered by a shopper here.
  """
  savedCardId: String
}

"The payment method to use for the whole order amount"
input SetPaymentInput {
  """
  The data needed to complete the payment. This could be data pre-associated with the payment method, such as a
  saved card ID, or data entered by the user, or both.
  """
  data: PaymentDataInput

  "The payment method type. Any valid type that has been registered by a payment plugin. e.g., saved_card"
  methodType: String!

  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String
}

"The response from the `setPayment` mutation"
type SetPaymentPayload {
  "The updated Cart"
  cart: Cart!

  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String
}

extend type Mutation {
  "Set the shipping address for all fulfillment groups"
  setShippingAddress(input: SetShippingAddressInput!): SetShippingAddressPayload!

  "Set the payment method and data for the full order amount"
  setPayment(input: SetPaymentInput!): SetPaymentPayload!

  # Maybe add later
  # addPayment(input: AddPaymentInput!): AddPaymentPayload!
  # removePayment(input: RemovePaymentInput!): RemovePaymentPayload!
}

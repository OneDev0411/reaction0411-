extend type Query {
  """
  Get a list of all payment methods available during a checkout. This may filter by auth,
  active/inactive, IP/region, shop, etc. To get the full list, use the `paymentMethods`
  query with proper authorization.
  """
  availablePaymentMethods(shopId: ID!): [PaymentMethod]!

  "Get a full list of all payment methods"
  paymentMethods(shopId: ID!): [PaymentMethod]!
}

extend type Mutation {
  """
  Use this mutation to place an order with example IOU payment.
  """
  placeOrderWithExampleIOUPayment(input: PlaceOrderWithExampleIOUPaymentInput!): PlaceOrderPayload!

  """
  Use this mutation to place an order with credit card payment, processed through a Stripe account,
  in a Marketplace installation. This is a variation of placeOrderWithStripeCardPayment that
  checks for marketplace configuration and assigns Stripe Connect account IDs to each shop payment.
  """
  placeMarketplaceOrderWithStripeCardPayment(input: PlaceMarketplaceOrderWithStripeCardPaymentInput!): PlaceOrderPayload!

  """
  Use this mutation to place an order with credit card payment, processed through a Stripe account.
  The order will be placed only if authorization is successful.
  """
  placeOrderWithStripeCardPayment(input: PlaceOrderWithStripeCardPaymentInput!): PlaceOrderPayload!
}


"""
Information about a payment made
"""
type Payment implements Node {
  "The Payment ID"
  _id: ID!

  """
  The amount that will be applied to this payment method. If there are multiple payment methods applied to the
  cart, this may be less than the cart total.
  """
  amount: Money!

  "For card payments, the brand of the card. Useful for showing card icons for common brands."
  cardBrand: String

  "The date and time at which this payment was created"
  createdAt: DateTime!

  """
  The shopper-provided data needed to complete the payment using this method.
  For example, a billing address, store credit code, stored credit card ID, etc.
  """
  data: PaymentData

  "Use this identifier when showing this payment in a user interface"
  displayName: String!

  "The payment method"
  method: PaymentMethod!
}

input StripeCardPaymentInput {
  "The billing address entered by the shopper"
  billingAddress: AddressInput!

  "If set, this will be saved as the Address._id. Otherwise an ID will be generated. For tracking whether this is from a saved address."
  billingAddressId: ID

  "The `token.id` of a token created by Stripe.js, representing a credit card"
  stripeTokenId: String!
}

"Input for the placeOrderWithStripeCardPayment mutation"
input PlaceOrderWithStripeCardPaymentInput {
  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String

  "The order to be placed, if payment is accepted"
  order: OrderInput!

  "The information necessary to pay. Collect this information from the shopper during a checkout flow."
  payment: StripeCardPaymentInput!
}

input ExampleIOUPaymentInput {
  "The billing address entered by the shopper"
  billingAddress: AddressInput!

  "If set, this will be saved as the Address._id. Otherwise an ID will be generated. For tracking whether this is from a saved address."
  billingAddressId: ID

  "The full name of the person who will eventually pay for this order"
  fullName: String!
}

"Input for the placeOrderWithExampleIOUPayment mutation"
input PlaceOrderWithExampleIOUPaymentInput {
  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String

  "The order to be placed, if payment is accepted"
  order: OrderInput!

  "The information necessary to pay. Collect this information from the shopper during a checkout flow."
  payment: ExampleIOUPaymentInput!
}

"An example"
type ExamplePaymentData {
  example: String!
}

union PaymentData = ExamplePaymentData

"Data for a Stripe card payment"
type StripeCardPaymentData {
  "The Stripe charge ID"
  chargeId: String!
}

extend union PaymentData = StripeCardPaymentData

"Payment plugins will extend or override this"
enum PaymentMethodName {
  discountcodes
  examplepaymentmethod
  reactionstripe
}

"An example"
type ExamplePaymentMethodData {
  example: String!
}

union PaymentMethodData = ExamplePaymentMethodData

"Describes a payment method"
type PaymentMethod {
  "Data for this method. The data format differs for each method"
  data: PaymentMethodData

  "The payment method name. Any valid name that has been registered by a payment plugin. e.g., saved_card"
  name: PaymentMethodName!
}

input MarketplaceStripeCardPaymentInput {
  "The billing address entered by the shopper"
  billingAddress: AddressInput!

  "If set, this will be saved as the Address._id. Otherwise an ID will be generated. For tracking whether this is from a saved address."
  billingAddressId: ID

  "The `token.id` of a token created by Stripe.js, representing a credit card"
  stripeTokenId: String!
}

"Input for the placeMarketplaceOrderWithStripeCardPayment mutation"
input PlaceMarketplaceOrderWithStripeCardPaymentInput {
  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String

  "The order to be placed, if payment is accepted"
  order: OrderInput!

  "The information necessary to pay. Collect this information from the shopper during a checkout flow."
  payment: MarketplaceStripeCardPaymentInput!
}

scalar ConnectionCursor
scalar ConnectionLimitInt

"The order in which the connection results should be sorted, based on the `sortBy` field."
enum SortOrder {
  "ascending"
  asc

  "descending"
  desc
}

"Objects implementing the `Node` interface will always have an `_id` field that is globally unique."
interface Node {
  "The ID of the object"
  _id: ID!
}

"Objects implementing the `Deletable` support soft deletion"
interface Deletable {
  """
  If `true`, this object should be considered deleted. Soft deleted objects are not
  returned in query results unless you explicitly ask for them.
  """
  isDeleted: Boolean!
}

"""
Objects implementing the `NodeEdge` interface will always have a `node` and a `cursor`
that represents that node for purposes of requesting paginated results.
"""
interface NodeEdge {
  "The cursor that represents this node in the paginated results"
  cursor: ConnectionCursor!

  "The node itself"
  node: Node
}

"""
Pagination information. When requesting pages of results, you can use `endCursor` or `startCursor`
as your `before` or `after` parameters for the query you are paging.
"""
type PageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: ConnectionCursor

  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!

  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!

  "When paginating backwards, the cursor to continue."
  startCursor: ConnectionCursor
}

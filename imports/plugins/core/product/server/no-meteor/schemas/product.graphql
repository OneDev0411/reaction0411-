"Types of products allowed by our schemas"
enum ProductType {
  "A `simple` product, which is always the top level product"
  simple

  "A `variant` product, which is a `variant` or `option`"
  variant
}

"A Reaction product"
type Product {
  "Product ID"
  _id: ID!

  "Ancestors of this product"
  ancestors: [ID]!

   "The date and time at which this product was created"
  createdAt: DateTime!

  "Hash to compare with publishedProductHash"
  currentProductHash: String

  "Product description"
  description: String

  "Message to post to Facebook when using social sharing"
  facebookMsg: String

  "Message to post to Google Plus when using social sharing"
  googleplusMsg: String

  "Slug of product as it appears in url"
  handle: String!

  "Hashtags"
  # TODO: add better description
  hashtags: [String]

  "Is product deleted?"
  isDeleted: Boolean!

  "Is product visible"
  isVisible: Boolean!

  "Metadescription"
  # TODO: add better description
  metaDescription: String

  "Descriptive metafields to attach to a product"
  metafields: [MetaFields]

  "Country of origin for this product"
  originCountry: String

  "Title to show on product page"
  pageTitle: String

  "Parcel information for product shipment"
  parcel: ShippingParcel

  "Message to post to Pinterest when using social sharing"
  pinterestMsg: String

  "Type of product"
  productType: String

  "The date and time at which this product was published"
  publishedAt: DateTime

  "Hash to compare with currentProductHash"
  publishedProductHash: String

  "ID of shop this product was created for"
  shopId: ID!

  "Should this product appear in sitemap"
  shouldAppearInSitemap: Boolean

  "Supported fulfillment types for this product"
  supportedFulfillmentTypes: [String]!

  "Product page template"
  template: String

  "Product title"
  title: String!

  "Message to post to Twitter when using social sharing"
  twitterMsg: String

  "Product type"
  # TODO: add better description
  # TODO: how is this different than "productType"?
  type: ProductType!

  "The date and time at which this product was updated"
  updatedAt: DateTime

  "The vendor of this product"
  vendor: String

  "Product workflow"
  workflow: Workflow
}

"A Reaction product variant or option"
type ProductVariant {
  "Variant ID"
  _id: ID!

  "Ancestors of this variant"
  ancestors: [ID]!

  "Attribute label"
  attributeLabel: String

  "Product barcode number"
  barcode: String

  "The date and time at which this product was created"
  createdAt: DateTime!

  "Event log"
  eventLog: Event

  "Height of variant"
  # TODO: Why is this here and not on the parcel data like on the product?
  height: Int

  "Variant position number in list"
  index: Int

  "Is product deleted?"
  isDeleted: Boolean!

  "Is product visible"
  isVisible: Boolean!

  "Length of variant"
  # TODO: Why is this here and not on the parcel data like on the product?
  length: Int

  "Descriptive metafields to attach to a product"
  metafields: [MetaFields]

  "Minimum order quantity for this variant"
  minOrderQuantity: Int

  "Option title to be shown when `short` version of name is in UI"
  optionTitle: String

  "Country of origin for this product"
  originCountry: String

  "ID of shop this product was created for"
  shopId: ID!

  "SKU of variant"
  sku: String

  "Variant title, shown when `long` version of name is in UI"
  title: String!

  "Product type"
  type: ProductType!

  "The date and time at which this product was updated"
  updatedAt: DateTime

  "Weight of variant"
  # TODO: Why is this here and not on the parcel data like on the product?
  weight: Int

  "Width of variant"
  # TODO: Why is this here and not on the parcel data like on the product?
  width: Int

  "Product workflow"
  workflow: Workflow
}

"Event description"
# TODO: add better description
type Event {
  "The date and time at which this event was created"
  createdAt: DateTime!

  "Event description"
  description: String

  "Event title"
  title: String!

  "What triggered the event"
  trigger: String

  "Event type"
  type: String!

  "User who triggered event"
  userId: ID
}

"Metafields description"
# TODO: add better description
type MetaFields {
  "Description"
  # TODO: add better description
  description: String

  "Key"
  # TODO: add better description
  key: String

  "Namespace"
  # TODO: add better description
  namespace: String

  "Scope"
  # TODO: add better description
  scope: String

  "Value"
  # TODO: add better description
  value: String

  "ValueType"
  # TODO: add better description
  valueType: String
}

"Workflow description"
# TODO: add better description
type Workflow {
  "Current workflow status of product"
  status: String!

  "Array of all workflows product has been in"
  workflow: [String]
}

"Response payload of `createProduct` mutation"
type CreateProductPayload  {
  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String

  "The ID of the product which was created"
  productId: ID!
}

"Response payload of `createProductVariant` mutation"
type CreateProductVariantPayload  {
  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String

  "The ID of the variant which was created"
  variantId: ID!
}

"Response payload of `cloneProducts` mutation"
type CloneProductsPayload  {
  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String

  "Array of newly cloned product IDs"
  productIds: [ID]!
}

"Response payload of `cloneProductVariants` mutation"
type CloneProductVariantsPayload  {
  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String

  "Array of newly cloned product variant IDs"
  variantIds: [ID]!
}

"Input for the `createProduct` mutation"
input CreateProductInput  {
  "ID of shop product will belong to"
  shopId: ID!
}

"Input for the `createProductVariant` mutation"
input CreateProductVariantInput  {
  "ID of product variant belongs to"
  parentId: ID!
}

"Input for the `cloneProducts` mutation"
input CloneProductsInput  {
  "Array of IDs of products to clone"
  productIds: [ID]!

  "ID of shop product will belong to"
  shopId: ID!
}

"Input for the `cloneProductVariants` mutation"
input CloneProductVariantsInput  {
  "ID of shop product will belong to"
  shopId: ID!

  "Array of IDs of variants to clone"
  variantIds: [ID]!
}

extend type Mutation {
  "Create a new product"
  createProduct(
    "Mutation input"
    input: CreateProductInput!
  ): CreateProductPayload!

  "Create a new product variant"
  createProductVariant(
    "Mutation input"
    input: CreateProductVariantInput!
  ): CreateProductVariantPayload!

  "Clone an existing product"
  cloneProducts(
    "Mutation input"
    input: CloneProductsInput!
  ): CloneProductsPayload!

  "Clone an existing product variant"
  cloneProductVariants(
    "Mutation input"
    input: CloneProductVariantsInput!
  ): CloneProductVariantsPayload!
}

"A Reaction product"
type Product {
  "Product ID"
  _id: ID!

   "The date and time at which this product was created"
  createdAt: DateTime!

  "Hash to compare with publishedProductHash, for use to see it published and unpublished products are the same"
  currentProductHash: String

  "The full product description, which may have newline characters in it"
  description: String

  "True if this product has been deleted. Typically, deleted products are not returned in queries."
  isDeleted: Boolean!

  "True if this product should be shown to shoppers. Typically, non-visible products are not returned in queries."
  isVisible: Boolean!

  "The product description to use for page `description` meta element in HTML"
  metaDescription: String

  "Arbitrary additional metadata about this product"
  metafields: [Metafield]

  "The country of origin"
  originCountry: String

  "Subtitle"
  pageTitle: String

  "An arbitrary product type value, such as from an external system"
  productType: String

  "The date and time at which this product was published"
  publishedAt: DateTime

  "Hash to compare with currentProductHash, for use to see it published and unpublished products are the same"
  publishedProductHash: String

  "The shop to which this product belongs"
  shop: Shop!

  "A URL-safe and human-readable string that uniquely identifies this product"
  slug: String

  "Holds metadata specific to a specific social network service"
  socialMetadata: [SocialMetadata]

  "When a shopper purchases this product, what types of fulfillment can they choose from?"
  supportedFulfillmentTypes: [FulfillmentType]!

  "The list of tag IDs that have been applied to this product"
  tagIds: [ID]

  "The list of tags that have been applied to this product"
  tags(
    "Return only results that come after this cursor. Use this with `first` to specify the number of results to return."
    after: ConnectionCursor,

    "Return only results that come before this cursor. Use this with `last` to specify the number of results to return."
    before: ConnectionCursor,

    "Return at most this many results. This parameter may be used with either `after` or `offset` parameters."
    first: ConnectionLimitInt,

    "Return at most this many results. This parameter may be used with the `before` parameter."
    last: ConnectionLimitInt,
    
    "Return only results that come after the Nth result. This parameter may be used with the `first` parameter."
    offset: Int,

    "Return results sorted in this order"
    sortOrder: SortOrder = asc,

    "By default, tags are sorted by ID. Set this to sort by one of the other allowed fields"
    sortBy: TagSortByField = _id
  ): TagConnection

  "Product title"
  title: String

  "The date and time at which this product was last updated, which is when the related product was most recently published"
  updatedAt: DateTime

  "A flat list of all variants for this product"
  variants: [ProductVariant]!

  "The product vendor or manufacturer, for display"
  vendor: String
}

"A Reaction product variant or option"
type ProductVariant {
  "Variant ID"
  _id: ID!

  """
  The attribute label describes the category of variant, for example, "Color" or "Size".
  In most cases this will be the same for all variants at the same level.
  """
  attributeLabel: String

  "The product variant barcode value, if it has one"
  barcode: String

  "The date and time at which this CatalogProductVariant was created, which is when the related product was first published"
  createdAt: DateTime

  "The height of the product variant, if it has physical dimensions"
  height: Float

  "The position of this variant among other variants at the same level of the product-variant-option hierarchy"
  index: Int

  "Is product deleted?"
  isDeleted: Boolean!

  "Is product visible"
  isVisible: Boolean!

  "The length of the product, if it has physical dimensions"
  length: Float

  "Arbitrary additional metadata about this product"
  metafields: [Metafield]!

  "The minimum quantity that must be added to a cart"
  minOrderQuantity: Int

  "A short title to use for product detail select lists"
  optionTitle: String

  "Child variants, if any"
  options: [ProductVariant]!

  "The country of origin"
  originCountry: String

  "The shop to which this product variant belongs"
  shop: Shop!

  "SKU of variant"
  sku: String

  """
  The full variant title for use on cart, checkout, and order summaries and on invoices.
  This fully describes the configured variant. For example, if this is an option with
  `optionTitle` "Large", its parent variant has `optionTitle` "Red", and the product
  `title` is "Fancy T-Shirt", then this `title` will be something like "Fancy T-Shirt - Red - Large".
  """
  title: String

  "The date and time at which this CatalogProduct was last updated, which is when the related product was most recently published"
  updatedAt: DateTime

  "The weight of the product on Earth, if it has physical dimensions"
  weight: Float

  "The width of the product, if it has physical dimensions"
  width: Float
}

"Response payload of `createProduct` mutation"
type CreateProductPayload  {
  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String

  "The ID of the product which was created"
  product: Product!
}

"Response payload of `createProductVariant` mutation"
type CreateProductVariantPayload  {
  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String

  "The ID of the variant which was created"
  variant: ProductVariant!
}

"Response payload of `cloneProducts` mutation"
type CloneProductsPayload  {
  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String

  "Array of newly cloned product IDs"
  products: [Product]!
}

"Response payload of `cloneProductVariants` mutation"
type CloneProductVariantsPayload  {
  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String

  "Array of newly cloned product variant IDs"
  variants: [ProductVariant]!
}

"Input for the `createProduct` mutation"
input CreateProductInput  {
  "ID of shop product will belong to"
  shopId: ID!
}

"Input for the `createProductVariant` mutation"
input CreateProductVariantInput  {
  "ID of product variant belongs to"
  productId: ID!

  "ID of shop product will belong to"
  shopId: ID!
}

"Input for the `cloneProducts` mutation"
input CloneProductsInput  {
  "Array of IDs of products to clone"
  productIds: [ID]!

  "ID of shop product will belong to"
  shopId: ID!
}

"Input for the `cloneProductVariants` mutation"
input CloneProductVariantsInput  {
  "ID of shop product will belong to"
  shopId: ID!

  "Array of IDs of variants to clone"
  variantIds: [ID]!
}

extend type Mutation {
  "Create a new product"
  createProduct(
    "Mutation input"
    input: CreateProductInput!
  ): CreateProductPayload!

  "Create a new product variant"
  createProductVariant(
    "Mutation input"
    input: CreateProductVariantInput!
  ): CreateProductVariantPayload!

  "Clone an existing product"
  cloneProducts(
    "Mutation input"
    input: CloneProductsInput!
  ): CloneProductsPayload!

  "Clone an existing product variant"
  cloneProductVariants(
    "Mutation input"
    input: CloneProductVariantsInput!
  ): CloneProductVariantsPayload!
}

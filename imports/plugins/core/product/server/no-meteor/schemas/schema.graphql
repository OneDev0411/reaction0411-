"Product configuration data"
type ProductConfiguration {
  "The Product ID"
  productId: ID!

  "The ProductVariant ID"
  productVariantId: ID!
}

"Operation"
type Operation {
  "Id of document"
  _id: String
}

"A bulk write error type"
type WriteError {
  "Error code"
  code: Int

  "Error message"
  errmsg: String

  "Index of of error"
  index: Int

  "Failed operation info"
  op: Operation
}

"Input for adding tags to products in bulk"
input ProductsBulkOperationInput {
  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String

  "An array of product ids to which an array of tags will be added"
  productIds: [ID]

  "An array of tag ids to add to an array of products"
  tagIds: [ID]
}

"Response payload for `bulkAddTagsToProducts` mutation"
type ProductsBulkOperationPayload  {
  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String

  "The number of products found"
  foundCount: Int

  "The number of products for which a match was not found"
  notFoundCount: Int

  "The number of products successfully updated"
  updatedCount: Int

  "An array of write errors if any were generated"
  writeErrors: [WriteError]
}

extend type Mutation {
  "Bulk operation for adding an array of tags to an array of products"
  bulkAddTagsToProducts(
    "input which must includes an array of product ids and an array of tag ids"
    input: ProductsBulkOperationInput!
  ): ProductsBulkOperationPayload!

  "Bulk operation for removing an array of tags from an array of products"
  bulkRemoveTagsFromProducts(
    "input which must includes an array of product ids and an array of tag ids"
    input: ProductsBulkOperationInput!
  ): ProductsBulkOperationPayload!
}

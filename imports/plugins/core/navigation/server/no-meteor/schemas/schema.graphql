extend type Query {
  "Get the navigation items for a shop"
  navigationItems(shopId: ID!): NavigationItem
}

type NavigationItem {
  "The navigation item ID."
  _id: ID!

  "The item's content. Can be plain text or HTML."
  content: String!

  "The link URL. Can be left empty to have context wrapped in a <span> instead of <a>."
  url: String

  "The ID of the shop this navigation item belongs to."
  shopId: ID!

  "Any metadata needed for the navigation item. Sent and received as stringified JSON, but stored as an object."
  metadata: JSONObject
}

extend type Mutation {
  "Create a navigation item"
  createNavigationItem(input: CreateNavigationItemInput!): NavigationItemPayload

  "Update a navigation item"
  updateNavigationItem(input: UpdateNavigationItemInput!): NavigationItemPayload

  "Delete a navigation item"
  deleteNavigationItem(input: DeleteNavigationItemInput!): NavigationItemPayload
}

input CreateNavigationItemInput {
  "The navigation item to add"
  navigationItem: NavigationItemInput!
}

input UpdateNavigationItemInput {
  "The navigation item ID."
  navigationItemId: ID!

  "The updated navigation item. Pass the whole object without the ID"
  navigationItem: NavigationItemInput!
}

input DeleteNavigationItemInput {
  "The navigation item ID."
  navigationItemId: ID!
}

input NavigationItemInput {
  "The item's content. Can be plain text or HTML."
  content: String!

  "The link URL. Can be left empty to have context wrapped in a <span> instead of <a>."
  url: String

  "The ID of the shop this navigation item belongs to."
  shopId: ID!

  "Any metadata needed for the navigation item. Sent and received as stringified JSON, but stored as an object."
  metadata: JSONObject
}

type NavigationItemPayload {
  "The navigation item that was created, updated, or deleted."
  navigationItem: NavigationItem
}

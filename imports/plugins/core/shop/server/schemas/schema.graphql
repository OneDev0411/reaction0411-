"URLs for various shop assets in various sizes"
type ShopBrandAssets {
  "URLs for the navigation bar brand logo image"
  navbarBrandImage: ImageSizes

  "Internal navigation bar brand logo image ID"
  navbarBrandImageId: String
}

"Shop logo URLs"
type ShopLogoUrls {
  "The primary logo URL for this shop. Setting this overrides any uploaded logo."
  primaryShopLogoUrl: String
}

"Storefront route URLs"
type StorefrontUrls {
  "Storefront Account Profile URL (can include `:accountId` in string)"
  storefrontAccountProfileUrl: String

  "Storefront Home URL"
  storefrontHomeUrl: String

  "Storefront login URL"
  storefrontLoginUrl: String

  "Storefront single order URL (can include `:orderReferenceId` and `:orderToken` in string)"
  storefrontOrderUrl: String

  "Storefront orders URL (can include `:accountId` in string)"
  storefrontOrdersUrl: String
}

"Represents a Reaction shop"
type Shop implements Node {
  "The shop ID"
  _id: ID!

  "URLs for various shop assets in various sizes"
  brandAssets: ShopBrandAssets

  "List of all currency definitions for the shop"
  currencies: [Currency]

  "The default shop currency"
  currency: Currency

  "The default navigation tree for this shop"
  defaultNavigationTree(
    "Navigation tree language"
    language: String!,

    "Whether to include secondary navigation items"
    shouldIncludeSecondary: Boolean = false
  ): NavigationTree

  "The ID of the shop's default navigation tree"
  defaultNavigationTreeId: String

  "Returns shop description"
  description: String

  "Returns shop language"
  language: String

  "Returns shop name"
  name: String

  "Returns URLs for shop logos"
  shopLogoUrls: ShopLogoUrls

  "Returns URLs for various storefront routes"
  storefrontUrls: StorefrontUrls

  "Returns a paged list of tags for this shop"
  tags(
    "If set, the query will return only top-level tags or only non-top-level tags. By default, both types of tags are returned."
    isTopLevel: Boolean,

    "Set to true if you want soft deleted tags to be included in the response"
    shouldIncludeDeleted: Boolean = false,

    "Return only results that come after this cursor. Use this with `first` to specify the number of results to return."
    after: ConnectionCursor,

    "Return only results that come before this cursor. Use this with `last` to specify the number of results to return."
    before: ConnectionCursor,

    "Return at most this many results. This parameter may be used with either `after` or `offset` parameters."
    first: ConnectionLimitInt,

    "Return at most this many results. This parameter may be used with the `before` parameter."
    last: ConnectionLimitInt,

    "Return results sorted in this order"
    sortOrder: SortOrder = asc,

    "By default, tags are sorted by position. Set this to sort by one of the other allowed fields"
    sortBy: TagSortByField = position
  ): TagConnection
}

extend type Query {
  "Returns the primary shop for the domain"
  primaryShop: Shop

  "Returns the ID of the primary shop for the domain"
  primaryShopId: ID

  "Returns a shop by ID"
  shop(
    "The shop ID"
    id: ID!
  ): Shop

  "Returns a shop by slug"
  shopBySlug(
    "The shop slug"
    slug: String!
  ): Shop
}

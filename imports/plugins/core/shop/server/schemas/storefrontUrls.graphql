"URLs for various routes"
type StorefrontUrls {
  "Storefront Account Profile URL (can include `:accountId` in string)"
  storefrontAccountProfileUrl: String

  "Storefront Home URL"
  storefrontHomeUrl: String

  "Storefront login URL"
  storefrontLoginUrl: String

  "Storefront single order URL (can include `:orderReferenceId` and `:orderToken` in string)"
  storefrontOrderUrl: String

  "Storefront orders URL (can include `:accountId` in string)"
  storefrontOrdersUrl: String
}

extend type Shop {
  "Returns URLs for various storefront routes"
  storefrontUrls: StorefrontUrls
}

"Shop URLs to provide for the updateShopUrls mutation"
input StorefrontUrlsInput {
  "Storefront Account Profile URL (can include `:accountId` in string)"
  storefrontAccountProfileUrl: String

  "Storefront Home URL"
  storefrontHomeUrl: String

  "Storefront login URL"
  storefrontLoginUrl: String

  "Storefront single order URL (can include `:orderReferenceId` and `:orderToken` in string)"
  storefrontOrderUrl: String

  "Storefront orders URL (can include `:accountId` in string)"
  storefrontOrdersUrl: String
}

"Input parameters for the updateShopUrls mutation"
input UpdateShopUrlsInput {
  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String

  "The ID of the shop to which you want to invite this person"
  shopId: ID!

  "URL object of all URL's for updateShopUrls mutation"
  storefrontUrls: StorefrontUrlsInput!
}

"The response from the `updateShopUrls` mutation"
type UpdateShopUrlsPayload {
  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String

  "The shop which was updated with URLs"
  shop: Shop!
}

extend type Mutation {
  "Given URLs for various shop pages, update the Shops collection object with URLs"
  updateShopUrls(input: UpdateShopUrlsInput!): UpdateShopUrlsPayload
}
